;;; org-roam-ui-lite.el --- Lightweight HTTP backend for org‑roam‑ui‑lite  -*- lexical-binding: t; -*-

;; Copyright (C) 2025  Masaya Taniguchi
;;
;; Author: Masaya Taniguchi <masaya.taniguchi@riken.jp>
;; URL: https://github.com/tani/org-roam-ui-lite
;; Package-Version: 0.1.0
;; Package-Requires: ((emacs "29.1") (simple-httpd "1.5.1") (org-roam "2.2.2"))
;; Keywords: hypermedia, tools, org
;; SPDX-License-Identifier: GPL-3.0-or-later

;; This file is NOT part of GNU Emacs.

;;; Commentary:
;; This single file turns Emacs into a tiny JSON API server that the
;; org‑roam‑ui‑lite front‑end (compiled into ../client/dist/) can consume.
;;
;; ────────────────────────────────────────────────────────────────────────────
;;  ENDPOINTS
;;  •  GET /api/graph            → graph of every node + edge
;;  •  GET /api/node/<id>        → single note payload or 404 JSON
;;
;;  QUICK START
;;  ───────────
;;  1.  Place the built front‑end under ../client/dist/ relative to this file.
;;  2.  Add to init.el:
;;        (require 'org-roam-ui-lite)
;;        ;; Optional custom port/root:
;;        ;; (setq org-roam-ui-lite-port 8000)
;;        (org-roam-ui-lite-server-start)
;;  3.  Browse to http://localhost:5174/index.html (or your port).
;;
;;  Customise `org-roam-ui-lite-port' or `org-roam-ui-lite-static-root' if your
;;  paths differ.
;; ────────────────────────────────────────────────────────────────────────────

;;; Code:

(require 'cl-lib)
(require 'json)
(require 'simple-httpd)
(require 'org-roam)

;;;; User options -------------------------------------------------------------
(defgroup org-roam-ui-lite nil
  "Serve Org‑roam graph data to the org‑roam‑ui‑lite front‑end."
  :group 'applications)

(defcustom org-roam-ui-lite-port 5174
  "TCP port for the JSON server."
  :type 'integer
  :group 'org-roam-ui-lite)

(defconst org-roam-ui-lite--this-file
  (or load-file-name buffer-file-name)
  "Absolute path to this file.")

(defconst org-roam-ui-lite--project-root
  (file-name-directory org-roam-ui-lite--this-file))

(defcustom org-roam-ui-lite-static-root
  (expand-file-name "../client/dist/" org-roam-ui-lite--project-root)
  "Directory containing *index.html* and bundled assets."
  :type 'directory
  :group 'org-roam-ui-lite)

;;;; simple-httpd initialisation ---------------------------------------------
(setq httpd-host "0.0.0.0"            ; listen on all interfaces
      httpd-root org-roam-ui-lite-static-root)

;;;; Org‑roam DB helper layer -------------------------------------------------
(defun org-roam-ui-lite--nodes ()
  "Return list of (id . title) pairs from Org‑roam DB."
  (mapcar (lambda (n) (cons (org-roam-node-id n)
                            (org-roam-node-title n)))
          (org-roam-node-list)))

(defun org-roam-ui-lite--valid-uuid-p (str)
  "Return non-nil if STR looks like a UUID."
  (and (stringp str)
       (string-match-p
        "^[0-9a-fA-F]\\{8\\}-[0-9a-fA-F]\\{4\\}-[1-5][0-9a-fA-F]\\{3\\}-[89abAB][0-9a-fA-F]\\{3\\}-[0-9a-fA-F]\\{12\\}$"
        str)))

(defun org-roam-ui-lite--links ()
  "Return list of (SOURCE . DEST) where DEST is a valid UUID node id."
  (cl-remove-if-not
   (lambda (pair)
     (org-roam-ui-lite--valid-uuid-p (cdr pair)))
   (mapcar (pcase-lambda (`(,src ,dst)) (cons src dst))
           (org-roam-db-query
            "SELECT source, dest FROM links WHERE dest IN (SELECT id FROM nodes);"))))


(defun org-roam-ui-lite--node-row (id)
  "Return single row (id title file pos) or nil."
  (car (org-roam-db-query
        "SELECT id,title,file,pos FROM nodes WHERE id=$s1 LIMIT 1;" id)))

(defun org-roam-ui-lite--backlinks (dest-id)
  "Return list of (source title) pointing to DEST-ID."
  (org-roam-db-query
   "SELECT l.source,n.title FROM links l JOIN nodes n ON l.source=n.id WHERE l.dest=$s1;" dest-id))

;;;; JSON helper --------------------------------------------------------------
(cl-defun org-roam-ui-lite--json (proc body &optional (status 200))
  "Send BODY JSON via PROC with HTTP STATUS."
  (with-httpd-buffer proc "application/json; charset=utf-8"
    (when (/= status 200)
      ;; override the default 200 header generated by with-httpd-buffer
      (setq httpd--header-sent nil)
      (httpd-send-header proc "application/json" status))
    (insert (json-encode body))))

;;;; /api/graph ---------------------------------------------------------------
(defservlet* api/graph text/plain ()
  (org-roam-ui-lite--json
   proc
   `((nodes . ,(apply #'vector (mapcar (pcase-lambda (`(,id . ,ttl))
                                         `((id . ,id) (title . ,ttl)))
                                      (org-roam-ui-lite--nodes))))
     (edges . ,(apply #'vector (mapcar (pcase-lambda (`(,src . ,dst))
                                         `((source . ,src) (dest . ,dst)))
                                      (org-roam-ui-lite--links)))))))

;;;; /api/node/:id ------------------------------------------------------------
(defservlet* api/node/:id text/plain ()
  (let ((row (org-roam-ui-lite--node-row id)))
    (if (null row)
        (org-roam-ui-lite--json proc '((error . "not_found")) 404)
      (pcase-let ((`(,nid ,ntitle ,nfile ,_) row))
        (let* ((raw   (with-temp-buffer
                        (insert-file-contents nfile) (buffer-string)))
               (backs (apply #'vector
                              (mapcar (pcase-lambda (`(,src ,ttl))
                                          `((source . ,src) (title . ,ttl)))
                                      (org-roam-ui-lite--backlinks nid)))))
          (org-roam-ui-lite--json
           proc
           `((id . ,nid)
             (title . ,ntitle)
             (raw . ,raw)
             (backlinks . ,backs))))))))

;;;; Entry point -------------------------------------------------------------
;;;###autoload
(defun org-roam-ui-lite-mode ()
  "Start org‑roam‑ui‑lite JSON server using `org-roam-ui-lite-port'."
  (interactive)
  (org-roam-db-autosync-mode 1)
  (setq httpd-port org-roam-ui-lite-port)
  (httpd-start)
  (browse-url (format "http://localhost:%d/index.html" httpd-port))
  (message "org-roam-ui-lite ▶ http://localhost:%d/index.html" httpd-port))

(provide 'org-roam-ui-lite)
;;; org-roam-ui-lite.el ends here
